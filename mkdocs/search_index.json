{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome!\n\n\nPython-daqss is a python module that serves as a wrapper around the API for the Dorchester Air Quality Sensor Study (DAQSS). The module makes it simple to access air quality data for the project. As of summer 2015, there are a total of five sensor nodes deployed in Dorchester, MA.\n\n\nEach node continuously measures ozone (O3), nitrogen oxide (NO), nitrogen dioxide (NO2), carbon monoxide (CO), relative humidity (RH), temperature (T), and particulate matter (PM).\n\n\nThe API is key, password protected; credentials can be obtained by emailing \ndhagan@mit.edu\n.\n\n\nInstallation\n\n\nYou can easily install the python module a couple of different ways:\n\n\ngit\n\n\n git clone https://github.com/dhhagan/python-daqss.git\n\n cd python-daqss\n\n python setup.py install\n\n\n\nwget\n\n\n wget https://github.com/dhhagan/python-daqss/archive/master.zip\n\n unzip master.zip\n\n cd python-daqss/\n\n sudo python setup.py install\n\n\n\nQuickstart\n\n\nOnce you have obtained credentials and installed the library, you can set up an instance of the \nDaqqs\n class:\n\n\nimport daqss\napi = daqss.Daqss(api_key, api_pswd)\n\n\n\nYou can check to see if your credentials work by pinging the server which will print \nTrue\n if everything is a go!\n\n\napi.ping()\n\n\n\nTypically, each call returns a tuple containing the API response status and the response json. An example of a call to get a list of all of the nodes would look something like this:\n\n\nstatus, resp = api.get_nodes()\n\n\n\nThe entire API wrapper is documented under the \nAPI page\n!", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "Python-daqss is a python module that serves as a wrapper around the API for the Dorchester Air Quality Sensor Study (DAQSS). The module makes it simple to access air quality data for the project. As of summer 2015, there are a total of five sensor nodes deployed in Dorchester, MA.  Each node continuously measures ozone (O3), nitrogen oxide (NO), nitrogen dioxide (NO2), carbon monoxide (CO), relative humidity (RH), temperature (T), and particulate matter (PM).  The API is key, password protected; credentials can be obtained by emailing  dhagan@mit.edu .", 
            "title": "Welcome!"
        }, 
        {
            "location": "/#installation", 
            "text": "You can easily install the python module a couple of different ways:  git   git clone https://github.com/dhhagan/python-daqss.git  cd python-daqss  python setup.py install  wget   wget https://github.com/dhhagan/python-daqss/archive/master.zip  unzip master.zip  cd python-daqss/  sudo python setup.py install", 
            "title": "Installation"
        }, 
        {
            "location": "/#quickstart", 
            "text": "Once you have obtained credentials and installed the library, you can set up an instance of the  Daqqs  class:  import daqss\napi = daqss.Daqss(api_key, api_pswd)  You can check to see if your credentials work by pinging the server which will print  True  if everything is a go!  api.ping()  Typically, each call returns a tuple containing the API response status and the response json. An example of a call to get a list of all of the nodes would look something like this:  status, resp = api.get_nodes()  The entire API wrapper is documented under the  API page !", 
            "title": "Quickstart"
        }, 
        {
            "location": "/API/v0-1/", 
            "text": "DAQSS API v0.1\n\n\nclass\n \ndaqss.Daqss\n(apikey, apipswd, version = 'v1.0')\n\n\n\n\n\n\nArguments\n\n\n\napikey\n: API Key\n\n\napipswd\n: API password/secret\n\n\nversion\n: API version. Currently at v1.0\n\n\n\n\n\n  \napi = daqss.Daqss(apikey = 'A123', apipswd = 'A321', version = 'v1.0')\n\n\n\n\n\n\nping\n()\n\n\n\n\nDescription\n\n\n\nreturns \ntrue\n if the authentication credentials check out\n\n\n\n\n\n\n\n\napi.ping()\n\n\n\n\n\nget_nodes\n()\n\n\n\n\nDescription\n\n\n\nreturns a list of all nodes\n\n\n\n\nNode Attributes\n\n\n\napikey\n: API Key\n\n\n\n\n\n\n\n\napi.get_nodes()\n\n\n\n\n\nget_node\n(sn)\n\n\n\n\nDescription\n\n\n\nreturns a single node as defined by it's serial number\n\n\n\n\nNode Attributes\n\n\n\napikey\n: API Key\n\n\n\n\n\n\n\n\napi.get_node('A123')\n\n\n\n\n\nget_alphasense_sensors\n()\n\n\n\n\nDescription\n\n\n\nreturns all alphasense sensors\n\n\n\n\nNode Attributes\n\n\n\napikey\n: API Key\n\n\n\n\n\n\n\n\napi.get_alphasense_sensors()\n\n\n\n\n\nget_alphasense_sensor\n(id = None)\n\n\n\n\nDescription\n\n\n\nreturns a single alphasense sensor as defined by it's id\n\n\n\n\nNode Attributes\n\n\n\napikey\n: API Key\n\n\n\n\n\n\n\n\napi.get_alphasense_sensor('123')\n\n\n\n\n\nget_alphasense_data\n(sn, basedate = None, enddate = None, period = None)\n\n\n\n\nArguments\n\n\n\nsn\n: serial number of the alphasense sensor\n\n\nbasedate\n: the beginning date for the data you want in the format \nYYYY-MM-DD\n\n\nenddate\n: the ending date for the data you want in the format \nYYYY-MM-DD\n\n\nperiod\n: length of time you want data for. ex. '1w', '2d', '3m', '1y'\n\n\n\n\nDescription\n\n\n\nreturns the data for a given alphasense sensor as identified by it's serial number\n\n\nNote:\n Only the period OR enddate must be specified, not both\n\n\n\n\nNode Attributes\n\n\n\napikey\n: API Key\n\n\n\n\n\n\n\n\napi.get_alphasense_data('A123', basedate = '2015-01-01', period = '1w')\napi.get_alphasense_data('A123', basedate = '2015-01-01', enddate = '2015-05-01')\n\n\n\n\n\nget_rhts\n()\n\n\n\n\nDescription\n\n\n\nreturns all rht sensors\n\n\n\n\n\n\n\n\napi.get_rhts()\n\n\n\n\n\nget_rht\n(id)\n\n\n\n\nDescription\n\n\n\nreturns a single rht sensor as defined by it's id\n\n\n\n\n\n\n\n\napi.get_rht('123')\n\n\n\n\n\nget_rht_data\n(sn, basedate = None, enddate = None, period = None)\n\n\n\n\nArguments\n\n\n\nsn\n: serial number of the rht sensor\n\n\nbasedate\n: the beginning date for the data you want in the format \nYYYY-MM-DD\n\n\nenddate\n: the ending date for the data you want in the format \nYYYY-MM-DD\n\n\nperiod\n: length of time you want data for. ex. '1w', '2d', '3m', '1y'\n\n\n\n\nDescription\n\n\n\nreturns the data for a given rht sensor as identified by it's serial number\n\n\nNote:\n Only the period OR enddate must be specified, not both\n\n\n\n\nNode Attributes\n\n\n\napikey\n: API Key\n\n\n\n\n\n\n\n\napi.get_rht_data('A123', basedate = '2015-01-01', period = '1w')\napi.get_rht_data('A123', basedate = '2015-01-01', enddate = '2015-05-01')\n\n\n\n\n\nget_opc\n(sn = None)\n\n\n\n\nDescription\n\n\n\nreturns a single OPC as defined by it's serial number\n\n\n\n\n\n\n\n\napi.get_opc('A123')\n\n\n\n\n\nget_opc_data\n(sn, basedate = None, enddate = None, period = None)\n\n\n\n\nArguments\n\n\n\nsn\n: serial number of the OPC\n\n\nbasedate\n: the beginning date for the data you want in the format \nYYYY-MM-DD\n\n\nenddate\n: the ending date for the data you want in the format \nYYYY-MM-DD\n\n\nperiod\n: length of time you want data for. ex. '1w', '2d', '3m', '1y'\n\n\n\n\nDescription\n\n\n\nreturns the data for a given OPC as identified by it's serial number\n\n\nNote:\n Only the period OR enddate must be specified, not both\n\n\n\n\n\n\n\n\napi.get_opc_data('A123', basedate = '2015-01-01', period = '1w')\napi.get_opc_data('A123', basedate = '2015-01-01', enddate = '2015-05-01')", 
            "title": "v0.1"
        }, 
        {
            "location": "/API/v0-1/#daqss-api-v01", 
            "text": "class   daqss.Daqss (apikey, apipswd, version = 'v1.0')    Arguments  apikey : API Key  apipswd : API password/secret  version : API version. Currently at v1.0   \n   api = daqss.Daqss(apikey = 'A123', apipswd = 'A321', version = 'v1.0')    ping ()   Description  returns  true  if the authentication credentials check out     api.ping()   get_nodes ()   Description  returns a list of all nodes   Node Attributes  apikey : API Key     api.get_nodes()   get_node (sn)   Description  returns a single node as defined by it's serial number   Node Attributes  apikey : API Key     api.get_node('A123')   get_alphasense_sensors ()   Description  returns all alphasense sensors   Node Attributes  apikey : API Key     api.get_alphasense_sensors()   get_alphasense_sensor (id = None)   Description  returns a single alphasense sensor as defined by it's id   Node Attributes  apikey : API Key     api.get_alphasense_sensor('123')   get_alphasense_data (sn, basedate = None, enddate = None, period = None)   Arguments  sn : serial number of the alphasense sensor  basedate : the beginning date for the data you want in the format  YYYY-MM-DD  enddate : the ending date for the data you want in the format  YYYY-MM-DD  period : length of time you want data for. ex. '1w', '2d', '3m', '1y'   Description  returns the data for a given alphasense sensor as identified by it's serial number  Note:  Only the period OR enddate must be specified, not both   Node Attributes  apikey : API Key     api.get_alphasense_data('A123', basedate = '2015-01-01', period = '1w')\napi.get_alphasense_data('A123', basedate = '2015-01-01', enddate = '2015-05-01')   get_rhts ()   Description  returns all rht sensors     api.get_rhts()   get_rht (id)   Description  returns a single rht sensor as defined by it's id     api.get_rht('123')   get_rht_data (sn, basedate = None, enddate = None, period = None)   Arguments  sn : serial number of the rht sensor  basedate : the beginning date for the data you want in the format  YYYY-MM-DD  enddate : the ending date for the data you want in the format  YYYY-MM-DD  period : length of time you want data for. ex. '1w', '2d', '3m', '1y'   Description  returns the data for a given rht sensor as identified by it's serial number  Note:  Only the period OR enddate must be specified, not both   Node Attributes  apikey : API Key     api.get_rht_data('A123', basedate = '2015-01-01', period = '1w')\napi.get_rht_data('A123', basedate = '2015-01-01', enddate = '2015-05-01')   get_opc (sn = None)   Description  returns a single OPC as defined by it's serial number     api.get_opc('A123')   get_opc_data (sn, basedate = None, enddate = None, period = None)   Arguments  sn : serial number of the OPC  basedate : the beginning date for the data you want in the format  YYYY-MM-DD  enddate : the ending date for the data you want in the format  YYYY-MM-DD  period : length of time you want data for. ex. '1w', '2d', '3m', '1y'   Description  returns the data for a given OPC as identified by it's serial number  Note:  Only the period OR enddate must be specified, not both     api.get_opc_data('A123', basedate = '2015-01-01', period = '1w')\napi.get_opc_data('A123', basedate = '2015-01-01', enddate = '2015-05-01')", 
            "title": "DAQSS API v0.1"
        }, 
        {
            "location": "/API/v0-2/", 
            "text": "DAQSS API v0.2\n\n\nv0.2 was released on June 29, 2015 and includes minor API changes\n\n\nclass\n \ndaqss.Daqss\n(apikey, apipswd, version = 'v1.0')\n\n\n\n\n\n\nArguments\n\n\n\napikey\n: API Key\n\n\napipswd\n: API password/secret\n\n\nversion\n: API version. Currently at v1.0\n\n\n\n\n\n  \napi = daqss.Daqss(apikey = 'A123', apipswd = 'A321', version = 'v1.0')\n\n\n\n\n\n\nping\n()\n\n\n\n\nDescription\n\n\n\nreturns \ntrue\n if the authentication credentials check out\n\n\n\n\n\n\n\n\napi.ping()\n\n\n\n\n\nget_nodes\n()\n\n\n\n\nDescription\n\n\n\nreturns a list of all nodes\n\n\n\n\nNode Attributes\n\n\n\napikey\n: API Key\n\n\n\n\n\n\n\n\napi.get_nodes()\n\n\n\n\n\nget_node\n(sn)\n\n\n\n\nDescription\n\n\n\nreturns a single node as defined by it's serial number\n\n\n\n\nNode Attributes\n\n\n\napikey\n: API Key\n\n\n\n\n\n\n\n\napi.get_node('A123')\n\n\n\n\n\nget_alphasense_sensors\n()\n\n\n\n\nDescription\n\n\n\nreturns all alphasense sensors\n\n\n\n\nNode Attributes\n\n\n\napikey\n: API Key\n\n\n\n\n\n\n\n\napi.get_alphasense_sensors()\n\n\n\n\n\nget_alphasense_sensor\n(id = None)\n\n\n\n\nDescription\n\n\n\nreturns a single alphasense sensor as defined by it's id\n\n\n\n\nNode Attributes\n\n\n\napikey\n: API Key\n\n\n\n\n\n\n\n\napi.get_alphasense_sensor('123')\n\n\n\n\n\nget_alphasense_data\n(sn, basedate = None, enddate = None, period = None)\n\n\n\n\nArguments\n\n\n\nsn\n: serial number of the alphasense sensor\n\n\nbasedate\n: the beginning date for the data you want in the format \nYYYY-MM-DD\n\n\nenddate\n: the ending date for the data you want in the format \nYYYY-MM-DD\n\n\nperiod\n: length of time you want data for. ex. '1w', '2d', '3m', '1y'\n\n\n\n\nDescription\n\n\n\nreturns the data for a given alphasense sensor as identified by it's serial number\n\n\nNote:\n Only the period OR enddate must be specified, not both\n\n\n\n\nNode Attributes\n\n\n\napikey\n: API Key\n\n\n\n\n\n\n\n\napi.get_alphasense_data('A123', basedate = '2015-01-01', period = '1w')\napi.get_alphasense_data('A123', basedate = '2015-01-01', enddate = '2015-05-01')\n\n\n\n\n\nget_rhts\n()\n\n\n\n\nDescription\n\n\n\nreturns all rht sensors\n\n\n\n\n\n\n\n\napi.get_rhts()\n\n\n\n\n\nget_rht\n(id)\n\n\n\n\nDescription\n\n\n\nreturns a single rht sensor as defined by it's id\n\n\n\n\n\n\n\n\napi.get_rht('123')\n\n\n\n\n\nget_rht_data\n(sn, basedate = None, enddate = None, period = None)\n\n\n\n\nArguments\n\n\n\nsn\n: serial number of the rht sensor\n\n\nbasedate\n: the beginning date for the data you want in the format \nYYYY-MM-DD\n\n\nenddate\n: the ending date for the data you want in the format \nYYYY-MM-DD\n\n\nperiod\n: length of time you want data for. ex. '1w', '2d', '3m', '1y'\n\n\n\n\nDescription\n\n\n\nreturns the data for a given rht sensor as identified by it's serial number\n\n\nNote:\n Only the period OR enddate must be specified, not both\n\n\n\n\nNode Attributes\n\n\n\napikey\n: API Key\n\n\n\n\n\n\n\n\napi.get_rht_data('A123', basedate = '2015-01-01', period = '1w')\napi.get_rht_data('A123', basedate = '2015-01-01', enddate = '2015-05-01')\n\n\n\n\n\nget_opc\n(sn = None)\n\n\n\n\nDescription\n\n\n\nreturns a single OPC as defined by it's serial number\n\n\n\n\n\n\n\n\napi.get_opc('A123')\n\n\n\n\n\nget_opc_data\n(sn, basedate = None, enddate = None, period = None)\n\n\n\n\nArguments\n\n\n\nsn\n: serial number of the OPC\n\n\nbasedate\n: the beginning date for the data you want in the format \nYYYY-MM-DD\n\n\nenddate\n: the ending date for the data you want in the format \nYYYY-MM-DD\n\n\nperiod\n: length of time you want data for. ex. '1w', '2d', '3m', '1y'\n\n\n\n\nDescription\n\n\n\nreturns the data for a given OPC as identified by it's serial number\n\n\nNote:\n Only the period OR enddate must be specified, not both\n\n\n\n\n\n\n\n\napi.get_opc_data('A123', basedate = '2015-01-01', period = '1w')\napi.get_opc_data('A123', basedate = '2015-01-01', enddate = '2015-05-01')", 
            "title": "v0.2"
        }, 
        {
            "location": "/API/v0-2/#daqss-api-v02", 
            "text": "v0.2 was released on June 29, 2015 and includes minor API changes  class   daqss.Daqss (apikey, apipswd, version = 'v1.0')    Arguments  apikey : API Key  apipswd : API password/secret  version : API version. Currently at v1.0   \n   api = daqss.Daqss(apikey = 'A123', apipswd = 'A321', version = 'v1.0')    ping ()   Description  returns  true  if the authentication credentials check out     api.ping()   get_nodes ()   Description  returns a list of all nodes   Node Attributes  apikey : API Key     api.get_nodes()   get_node (sn)   Description  returns a single node as defined by it's serial number   Node Attributes  apikey : API Key     api.get_node('A123')   get_alphasense_sensors ()   Description  returns all alphasense sensors   Node Attributes  apikey : API Key     api.get_alphasense_sensors()   get_alphasense_sensor (id = None)   Description  returns a single alphasense sensor as defined by it's id   Node Attributes  apikey : API Key     api.get_alphasense_sensor('123')   get_alphasense_data (sn, basedate = None, enddate = None, period = None)   Arguments  sn : serial number of the alphasense sensor  basedate : the beginning date for the data you want in the format  YYYY-MM-DD  enddate : the ending date for the data you want in the format  YYYY-MM-DD  period : length of time you want data for. ex. '1w', '2d', '3m', '1y'   Description  returns the data for a given alphasense sensor as identified by it's serial number  Note:  Only the period OR enddate must be specified, not both   Node Attributes  apikey : API Key     api.get_alphasense_data('A123', basedate = '2015-01-01', period = '1w')\napi.get_alphasense_data('A123', basedate = '2015-01-01', enddate = '2015-05-01')   get_rhts ()   Description  returns all rht sensors     api.get_rhts()   get_rht (id)   Description  returns a single rht sensor as defined by it's id     api.get_rht('123')   get_rht_data (sn, basedate = None, enddate = None, period = None)   Arguments  sn : serial number of the rht sensor  basedate : the beginning date for the data you want in the format  YYYY-MM-DD  enddate : the ending date for the data you want in the format  YYYY-MM-DD  period : length of time you want data for. ex. '1w', '2d', '3m', '1y'   Description  returns the data for a given rht sensor as identified by it's serial number  Note:  Only the period OR enddate must be specified, not both   Node Attributes  apikey : API Key     api.get_rht_data('A123', basedate = '2015-01-01', period = '1w')\napi.get_rht_data('A123', basedate = '2015-01-01', enddate = '2015-05-01')   get_opc (sn = None)   Description  returns a single OPC as defined by it's serial number     api.get_opc('A123')   get_opc_data (sn, basedate = None, enddate = None, period = None)   Arguments  sn : serial number of the OPC  basedate : the beginning date for the data you want in the format  YYYY-MM-DD  enddate : the ending date for the data you want in the format  YYYY-MM-DD  period : length of time you want data for. ex. '1w', '2d', '3m', '1y'   Description  returns the data for a given OPC as identified by it's serial number  Note:  Only the period OR enddate must be specified, not both     api.get_opc_data('A123', basedate = '2015-01-01', period = '1w')\napi.get_opc_data('A123', basedate = '2015-01-01', enddate = '2015-05-01')", 
            "title": "DAQSS API v0.2"
        }
    ]
}